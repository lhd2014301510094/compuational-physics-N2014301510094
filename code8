from __future__ import division
import matplotlib
import numpy as np
#import matplotlib.cm as cm
#import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D




initial_v = []
for i in range(201):    
    row_i = []
    for j in range(201):
        if i == 0 or i == 200 or j == 0 or j == 200:
            voltage = 0
        elif 70<=i<=130 and j == 70:
            voltage = 1
        elif 70<=i<=130 and j == 130:
            voltage = -1
        else:
            voltage = 0
        row_i.append(voltage)
    initial_v.append(row_i)



def update_V(initial_v):

    delta_V = 0

    for i in range(201):    
        for j in range(201):
            if i == 0 or i == 200 or j == 0 or j == 200:
                pass
            elif 70<=i<=130 and j == 70:
                pass
            elif 70<=i<=130 and j == 130:
                pass
            else:
                voltage_new = (initial_v[i+1][j]+initial_v[i-1][j]+initial_v[i][j+1]+initial_v[i][j-1])/4
                voltage_old = initial_v[i][j]
                delta_V += abs(voltage_new - voltage_old)
                initial_v[i][j] = voltage_new

    return initial_v, delta_V



def Laplace_calculate(initial_v):

    epsilon = 10**(-5)*200**2
    initial_v_init = initial_v
    delta_V = 0
    N_iter = 0

    while delta_V >= epsilon or N_iter <= 10:
       initial_v_impr, delta_V = update_V(initial_v_init)
       initial_v_new, delta_V = update_V(initial_v_impr)
       initial_v_init = initial_v_new
       N_iter += 1

    return initial_v_new

matplotlib.rcParams['xtick.direction'] = 'out'
matplotlib.rcParams['ytick.direction'] = 'out'

x = np.linspace(0,200,201)
y = np.linspace(0,200,201)
X, Y = np.meshgrid(x, y)
Z = Laplace_calculate(initial_v)

plt.figure()
CS = plt.contour(X,Y,Z,10)
plt.clabel(CS, inline=1, fontsize=12)
plt.title('voltage near capacitor')
plt.xlabel('x(m)')
plt.ylabel('y(m)')

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z)
ax.set_xlabel('x(m)')
ax.set_ylabel('y(m)')
ax.set_zlabel('voltage(V)')
ax.set_title('voltage distribution')

plt.show()
