import pylab as pl
import numpy as np
import math
class kepler_laws:
    def __init__(self, time_step=0.0001, initial_x=1, initial_y=0, initial_r=1,  initial_vy=5, initial_theta=0, initial_omiga=0):
        self.dt=time_step
        self.x=[initial_x]
        self.y=[initial_y]
        self.vx=[0]
        self.vy=[initial_vy]
        self.r=[initial_r]
        self.th=[initial_theta]
        self.w=[initial_omiga]
        self.t=[0]
    def run(self):
        for i in range(140000):
            self.r.append(np.sqrt(self.x[-1]**2+self.y[-1]**2))
            self.vx.append(self.vx[-1]-4*math.pi**2*self.x[-1]*self.dt/(self.r[-1]**3))
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.vy.append(self.vy[-1]-4*math.pi**2*self.y[-1]*self.dt/(self.r[-1]**3))
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
            self.w.append(self.w[-1]-(12*math.pi**2*(self.x[-1]*math.sin(self.th[-1])-self.y[-1]*math.cos(self.th[-1]))*(self.x[-1]*math.cos(self.th[-1])+self.y[-1]*math.sin(self.th[-1]))/self.r[-1]**5)*self.dt)
            self.th.append(self.th[-1]+self.w[-1]*self.dt)
            if self.th[-1] > math.pi:
                self.th[-1] = self.th[-1] -2 * math.pi
            elif self.th[-1] < -math.pi:
                    self.th[-1] = self.th[-1] +2 * math.pi
            else:
                pass
            self.t.append(self.t[-1]+self.dt)
    def show(self):
        #font = {'family': 'serif','color':  'darkred','weight': 'normal','size': 16,}
        #pl.figure(figsize=(35,35))
        pl.plot(self.t, self.w)
        pl.title('Hyperion $\Theta$ versus time')
        pl.xlabel('time(yr)')
        pl.ylabel('$\Theta$(radians)')
        #pl.scatter([0],[0],s=100,color='red')
        #pl.xlim(-1,1)
        #pl.ylim(-1,1)
        #pl.text(self.x[-20], self.y[0],'Circular orbit', fontdict = font)
        pl.show()
a=kepler_laws()
a.run()
a.show()
